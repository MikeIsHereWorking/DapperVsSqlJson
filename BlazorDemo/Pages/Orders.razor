@page "/orders"
@inject OrderData sql

<h3>Order Lookup</h3>
<div>
    <label>Iterations</label>
    <input type="number" @bind="iterations"/>
</div>
<div class="row align-items-end mb-5 bg-dark p-3 rounded-4">
    <div class="col-4">
        <button class="btn btn-primary" @onclick="LoadAll">Load All</button>
        <button class="btn btn-primary" @onclick="LoadAllJson">Load All Json</button>
    </div>
    <div class="col-4">
        <input type="number" class="mb-2 form-control" @bind="orderId" />
        <button class="btn btn-primary" @onclick="LoadOne">Load One</button>
    </div>
    <div class="col-4">
        <input type="date" class="mb-2 form-control" @bind="startDate" />
        <input type="date" class="mb-2 form-control" @bind="endDate" />
        <button class="btn btn-primary" @onclick="LoadByDate">Load By Date</button>
    </div>
</div>

<h3>Order Results</h3>

@if (timeElapse> 0)
{
    <span>@timeElapse ms</span>
}

@if (orders is not null)
{
    foreach (var o in orders)
    {
        <h4>Order on @o.PurchaseDate.ToShortDateString()</h4>
        <ul>
            @foreach (var item in o.LineItems)
            {
                <li>@item.Item</li>
            }
        </ul>    }
}

@code {
    private List<OrderModel>? orders;
    private int orderId;
    private int iterations;
    private DateTime? startDate;
    private DateTime? endDate;
    private long timeElapse=0;

    private async Task LoadAll()
    {
        // orders = await sql.GetOrdersAsync();
        timeElapse = await sql.GetIterationsOf_GetOrdersAsyncJson(iterations);
    }


    private async Task LoadAllJson()
    {

        //orders = await sql.GetOrdersAsyncJson();
        timeElapse = await sql.GetIterationsOf_GetOrdersAsyncJson(iterations);


    }

    private async Task LoadOne()
    {
        orders = new();

        var order = await sql.GetOrderAsync(orderId);

        if (order is not null)
        {
            orders.Add(order);
        }
    }

    private async Task LoadByDate()
    {
        orders = await sql.GetOrdersByDateAsync(startDate!.Value, endDate!.Value);
    }
}
